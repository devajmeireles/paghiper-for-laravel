{"config":{"indexing":"full","lang":["pt"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Boas-vindas Bem-vindo a documenta\u00e7\u00e3o do pacote PagHiper for Laravel . PagHiper for Laravel \u00e9 um pacote de c\u00f3digo aberto, baseado na licen\u00e7a MIT criando por AJ Meireles , que visa adicionar a sua aplica\u00e7\u00e3o Laravel uma integra\u00e7\u00e3o f\u00e1cil com os principais recursos da PagHiper, sendo eles: Integra\u00e7\u00e3o Completa com Boleto Banc\u00e1rio Integra\u00e7\u00e3o Completa com PIX","title":"Boas-vindas"},{"location":"#boas-vindas","text":"Bem-vindo a documenta\u00e7\u00e3o do pacote PagHiper for Laravel . PagHiper for Laravel \u00e9 um pacote de c\u00f3digo aberto, baseado na licen\u00e7a MIT criando por AJ Meireles , que visa adicionar a sua aplica\u00e7\u00e3o Laravel uma integra\u00e7\u00e3o f\u00e1cil com os principais recursos da PagHiper, sendo eles: Integra\u00e7\u00e3o Completa com Boleto Banc\u00e1rio Integra\u00e7\u00e3o Completa com PIX","title":"Boas-vindas"},{"location":"erros/excessoes/","text":"Tratamento de Erro Em diversos casos voc\u00ea pode se deparar com excess\u00f5es lan\u00e7adas pelo PagHiper for Laravel . Nesta p\u00e1gina voc\u00ea encontrar\u00e1 a explica\u00e7\u00e3o para as mais comuns excess\u00f5es dispon\u00edveis: DevAjMeireles\\PagHiper\\Exceptions\\PagHiperException::class Erro gen\u00e9rico para todo caso onde a resposta da PagHiper seja reject . DevAjMeireles\\PagHiper\\Exceptions\\UnallowedEmptyNotificationUrl::class Lan\u00e7ada ao tentar criar um PIX/Boleto Banc\u00e1rio sem informar um notification_url DevAjMeireles\\PagHiper\\Exceptions\\UnsupportedCastTypeExcetion::class Tentativa de uso de cast inexistente ou n\u00e3o aplic\u00e1vel DevAjMeireles\\PagHiper\\Exceptions\\NotificationModelNotFoundException::class Erro na busca pelo modelador, relacionado com o m\u00e9todo modelable() DevAjMeireles\\PagHiper\\Exceptions\\WrongModelSetUpException::class Erro na montagem do modelador para uso na cria\u00e7\u00e3o de PIX/Boleto Banc\u00e1rio N\u00e3o encontrou o que procurava? Abra uma issue no reposit\u00f3rio reportando um bug.","title":"Excess\u00f5es"},{"location":"erros/excessoes/#tratamento-de-erro","text":"Em diversos casos voc\u00ea pode se deparar com excess\u00f5es lan\u00e7adas pelo PagHiper for Laravel . Nesta p\u00e1gina voc\u00ea encontrar\u00e1 a explica\u00e7\u00e3o para as mais comuns excess\u00f5es dispon\u00edveis: DevAjMeireles\\PagHiper\\Exceptions\\PagHiperException::class Erro gen\u00e9rico para todo caso onde a resposta da PagHiper seja reject . DevAjMeireles\\PagHiper\\Exceptions\\UnallowedEmptyNotificationUrl::class Lan\u00e7ada ao tentar criar um PIX/Boleto Banc\u00e1rio sem informar um notification_url DevAjMeireles\\PagHiper\\Exceptions\\UnsupportedCastTypeExcetion::class Tentativa de uso de cast inexistente ou n\u00e3o aplic\u00e1vel DevAjMeireles\\PagHiper\\Exceptions\\NotificationModelNotFoundException::class Erro na busca pelo modelador, relacionado com o m\u00e9todo modelable() DevAjMeireles\\PagHiper\\Exceptions\\WrongModelSetUpException::class Erro na montagem do modelador para uso na cria\u00e7\u00e3o de PIX/Boleto Banc\u00e1rio N\u00e3o encontrou o que procurava? Abra uma issue no reposit\u00f3rio reportando um bug.","title":"Tratamento de Erro"},{"location":"iniciando/detalhes-tecnicos/","text":"Detalhes T\u00e9cnicos Paghiper for Laravel foi criado para suportar aplica\u00e7\u00f5es Laravel a partir da vers\u00e3o 9, com PHP 8.0, no mais alto padr\u00e3o poss\u00edvel do PHP moderno, com cobertura de testes e fortemente tipado, garantindo estabilidade nas funcionalidades. PHP & Laravel Vers\u00e3o do PHP: 8.0.2 (ou superior) 8.1.x 8.2.x 8.3.x Vers\u00e3o do Laravel: 9.x 10.x Facade Paghiper for Laravel oferece uma Facade para intera\u00e7\u00e3o com a classe principal do pacote: use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::billet()->create(/* ... */) Cliente HTTP Por tr\u00e1s dos panos, Paghiper for Laravel utiliza o poder do cliente HTTP do Laravel . Com isso, caso voc\u00ea precise escrever testes automatizados, voc\u00ea deve seguir o esquema de testes do Laravel. Resolvedores Paghiper for Laravel oferece recursos de resolvedores para viabilizar a defini\u00e7\u00e3o de configura\u00e7\u00f5es em tempo de execu\u00e7\u00e3o, ideal para casos onde voc\u00ea precise sobescrever as configura\u00e7\u00f5es de api ou token do arquivo .env , ou para prefixar URL de retorno autom\u00e1tico: // arquivo: app/Providers/AppServicesProvider.php use DevAjMeireles\\PagHiper\\Facades\\PagHiper; // \ud83d\udc48 public function boot(): void { // ... PagHiper::resolveApiUsing(fn () => 'api-que-vai-sobescrever-a-api-do-env'); PagHiper::resolveTokenUsing(fn () => 'token-que-vai-sobescrever-o-token-do-env'); PagHiper::resolveBilletNotificationUrlUsing(fn () => route('rota-padr\u00e3o-de-retorno-autom\u00e1tico-de-boletos')); PagHiper::resolvePixNotificationUrlUsing(fn () => route('rota-padr\u00e3o-de-retorno-autom\u00e1tico-de-pix')); } Se preferir voc\u00ea pode utilizar m\u00e9todos que combinam as a\u00e7\u00f5es: // arquivo: app/Providers/AppServicesProvider.php use DevAjMeireles\\PagHiper\\Facades\\PagHiper; // \ud83d\udc48 public function boot(): void { // ... PagHiper::resolveCredentialsUsing( fn () => 'api-que-vai-sobescrever-a-api-do-env', fn () => 'token-que-vai-sobescrever-o-token-do-env' ); } Voc\u00ea tamb\u00e9m pode utilizar uma \u00fanica fun\u00e7\u00e3o para resolver duas rotas: // arquivo: app/Providers/AppServicesProvider.php use DevAjMeireles\\PagHiper\\Facades\\PagHiper; // \ud83d\udc48 public function boot(): void { // ... PagHiper::resolveNotificationUrlUsing( fn () => route('rota-padr\u00e3o-de-retorno-autom\u00e1tico-de-boletos'), fn () => route('rota-padr\u00e3o-de-retorno-autom\u00e1tico-de-pix') ); } Outros Detalhes Cobertura de Testes, usando PestPHP Cobertura de Tipagem de C\u00f3digo (100%), PestPHP Cobertura de Analise de C\u00f3digo (Level 5, 100%), PhpStan Os testes s\u00e3o projetados exclusivamete sob o Laravel 10.","title":"Detalhes T\u00e9cnicos"},{"location":"iniciando/detalhes-tecnicos/#detalhes-tecnicos","text":"Paghiper for Laravel foi criado para suportar aplica\u00e7\u00f5es Laravel a partir da vers\u00e3o 9, com PHP 8.0, no mais alto padr\u00e3o poss\u00edvel do PHP moderno, com cobertura de testes e fortemente tipado, garantindo estabilidade nas funcionalidades.","title":"Detalhes T\u00e9cnicos"},{"location":"iniciando/detalhes-tecnicos/#php-laravel","text":"Vers\u00e3o do PHP: 8.0.2 (ou superior) 8.1.x 8.2.x 8.3.x Vers\u00e3o do Laravel: 9.x 10.x","title":"PHP &amp; Laravel"},{"location":"iniciando/detalhes-tecnicos/#facade","text":"Paghiper for Laravel oferece uma Facade para intera\u00e7\u00e3o com a classe principal do pacote: use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::billet()->create(/* ... */)","title":"Facade"},{"location":"iniciando/detalhes-tecnicos/#cliente-http","text":"Por tr\u00e1s dos panos, Paghiper for Laravel utiliza o poder do cliente HTTP do Laravel . Com isso, caso voc\u00ea precise escrever testes automatizados, voc\u00ea deve seguir o esquema de testes do Laravel.","title":"Cliente HTTP"},{"location":"iniciando/detalhes-tecnicos/#resolvedores","text":"Paghiper for Laravel oferece recursos de resolvedores para viabilizar a defini\u00e7\u00e3o de configura\u00e7\u00f5es em tempo de execu\u00e7\u00e3o, ideal para casos onde voc\u00ea precise sobescrever as configura\u00e7\u00f5es de api ou token do arquivo .env , ou para prefixar URL de retorno autom\u00e1tico: // arquivo: app/Providers/AppServicesProvider.php use DevAjMeireles\\PagHiper\\Facades\\PagHiper; // \ud83d\udc48 public function boot(): void { // ... PagHiper::resolveApiUsing(fn () => 'api-que-vai-sobescrever-a-api-do-env'); PagHiper::resolveTokenUsing(fn () => 'token-que-vai-sobescrever-o-token-do-env'); PagHiper::resolveBilletNotificationUrlUsing(fn () => route('rota-padr\u00e3o-de-retorno-autom\u00e1tico-de-boletos')); PagHiper::resolvePixNotificationUrlUsing(fn () => route('rota-padr\u00e3o-de-retorno-autom\u00e1tico-de-pix')); } Se preferir voc\u00ea pode utilizar m\u00e9todos que combinam as a\u00e7\u00f5es: // arquivo: app/Providers/AppServicesProvider.php use DevAjMeireles\\PagHiper\\Facades\\PagHiper; // \ud83d\udc48 public function boot(): void { // ... PagHiper::resolveCredentialsUsing( fn () => 'api-que-vai-sobescrever-a-api-do-env', fn () => 'token-que-vai-sobescrever-o-token-do-env' ); } Voc\u00ea tamb\u00e9m pode utilizar uma \u00fanica fun\u00e7\u00e3o para resolver duas rotas: // arquivo: app/Providers/AppServicesProvider.php use DevAjMeireles\\PagHiper\\Facades\\PagHiper; // \ud83d\udc48 public function boot(): void { // ... PagHiper::resolveNotificationUrlUsing( fn () => route('rota-padr\u00e3o-de-retorno-autom\u00e1tico-de-boletos'), fn () => route('rota-padr\u00e3o-de-retorno-autom\u00e1tico-de-pix') ); }","title":"Resolvedores"},{"location":"iniciando/detalhes-tecnicos/#outros-detalhes","text":"Cobertura de Testes, usando PestPHP Cobertura de Tipagem de C\u00f3digo (100%), PestPHP Cobertura de Analise de C\u00f3digo (Level 5, 100%), PhpStan Os testes s\u00e3o projetados exclusivamete sob o Laravel 10.","title":"Outros Detalhes"},{"location":"iniciando/instalacao/","text":"Instala\u00e7\u00e3o Para instalar o pacote PagHiper for Laravel , execute os seguintes comandos: composer require devajmeireles/paghiper-for-laravel:^1.0 Em seguida execute o comando: php artisan paghiper:install O comando paghiper:install ir\u00e1 publicar o arquivo de configura\u00e7\u00e3o do pacote em config/paghiper.php , e tamb\u00e9m criar\u00e1 vari\u00e1veis de ambiente no arquivo .env do projeto. Opcionalmente, voc\u00ea pode utilizar o comando com o parametro --force para sobrescrever o arquivo de configura\u00e7\u00e3o, caso ele j\u00e1 exista. Por \u00faltimo, configure o .env do projeto preenchendo as credenciais da sua conta PagHiper: PAGHIPER_API=sua-api-aqui PAGHIPER_TOKEN=seu-token-aqui","title":"Instala\u00e7\u00e3o"},{"location":"iniciando/instalacao/#instalacao","text":"Para instalar o pacote PagHiper for Laravel , execute os seguintes comandos: composer require devajmeireles/paghiper-for-laravel:^1.0 Em seguida execute o comando: php artisan paghiper:install O comando paghiper:install ir\u00e1 publicar o arquivo de configura\u00e7\u00e3o do pacote em config/paghiper.php , e tamb\u00e9m criar\u00e1 vari\u00e1veis de ambiente no arquivo .env do projeto. Opcionalmente, voc\u00ea pode utilizar o comando com o parametro --force para sobrescrever o arquivo de configura\u00e7\u00e3o, caso ele j\u00e1 exista. Por \u00faltimo, configure o .env do projeto preenchendo as credenciais da sua conta PagHiper: PAGHIPER_API=sua-api-aqui PAGHIPER_TOKEN=seu-token-aqui","title":"Instala\u00e7\u00e3o"},{"location":"recursos/boleto/cancelando/","text":"Cancelando Para cancelar um Boleto Banc\u00e1rio utilize o m\u00e9todo cancel : use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::billet()->cancel('HF97T5SH2ZQNLF6Z'); Casts Voc\u00ea tamb\u00e9m pode usar os casts dispon\u00edveis para transformar a resposta.","title":"Cancelando"},{"location":"recursos/boleto/cancelando/#cancelando","text":"Para cancelar um Boleto Banc\u00e1rio utilize o m\u00e9todo cancel : use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::billet()->cancel('HF97T5SH2ZQNLF6Z');","title":"Cancelando"},{"location":"recursos/boleto/cancelando/#casts","text":"Voc\u00ea tamb\u00e9m pode usar os casts dispon\u00edveis para transformar a resposta.","title":"Casts"},{"location":"recursos/boleto/criando/","text":"Criando Sintaxe use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::billet()->create(/* ... */) Criando Boleto Para uma melhor organiza\u00e7\u00e3o, a forma de interagir com a cria\u00e7\u00e3o de boletos \u00e9 enviando para o m\u00e9todo create quatro (4) inst\u00e2ncias de classes de objeto: use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Billet\\Address; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Payer; // \ud83d\udc48 $billet = PagHiper::billet() ->create( Basic::make() // \ud83d\udc48 ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('days_due_date', 2), Payer::make() // \ud83d\udc48 ->set('name', 'Joao In\u00e1cio da Silva') ->set('email', 'joao.inacio@gmail.com') ->set('cpf_cnpj', '99279725041') ->set('phone', '11985850505') ->set( 'address', Address::make() // \ud83d\udc48 ->set('street', 'Rua Alameda Bar\u00e3o de Limeira') ->set('number', 102) ->set('complement', 'Casa') ->set('district', 'S\u00e3o Vicente') ->set('city', 'S\u00e3o Paulo') ->set('state', 'S\u00e3o Paulo') ->set('zip_code', '13332251') ), Item::make() // \ud83d\udc48 ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000)); Observa\u00e7\u00f5es O m\u00e9todo set ir\u00e1 procurar pela propriedade e s\u00f3 definir\u00e1 o seu valor caso encontre a propriedade na classe que est\u00e1 sendo constru\u00edda pelo m\u00e9todo make . O nome das propriedades deve seguir exatamente a conven\u00e7\u00e3o de nome das propriedades de boleto banc\u00e1rio da PagHiper Usando Modelador do Laravel Opcionalmente, voc\u00ea pode usar um modelador do Laravel como Payer do boleto: use App\\Models\\User; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::billet() ->create( Basic::make() ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('days_due_date', 2), User::first(), // \ud83d\udc48 Item::make() ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000)); Para utilizar a abordagem, acima seu modelador deve implementar a interface PagHiperModelAbstraction , a qual exigir\u00e1 que os seguintes m\u00e9todos sejam criados na classe do modelador: namespace App\\Models; use DevAjMeireles\\PagHiper\\Contracts\\PagHiperModelAbstraction; // \ud83d\udc48 use Illuminate\\Database\\Eloquent\\Model; class User extends Model implements PagHiperModelAbstraction // \ud83d\udc48 { // ... public function pagHiperName(): string { return 'Joao In\u00e1cio da Silva'; } public function pagHiperEmail(): string { return 'joao.inacio@gmail.com'; } public function pagHiperCpfCnpj(): string { return '99279725041'; } public function pagHiperPhone(): string { return '11985850505'; } public function pagHiperAddress(): array { return [ 'street' => 'Rua Alameda Bar\u00e3o de Limeira', 'number' => 102, 'complement' => 'Casa', 'district' => 'S\u00e3o Vicente', 'city' => 'S\u00e3o Paulo', 'zip_code' => '13332251', ]; } }; Multiplos Itens Voc\u00ea tamb\u00e9m pode enviar um array de itens: use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Billet\\Address; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Payer; $billet = PagHiper::billet() ->create( Basic::make() ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('days_due_date', 2), Payer::make() ->set('name', 'Joao In\u00e1cio da Silva') ->set('email', 'joao.inacio@gmail.com') ->set('cpf_cnpj', '99279725041') ->set('phone', '11985850505') ->set( 'address', Address::make() ->set('street', 'Rua Alameda Bar\u00e3o de Limeira') ->set('number', 102) ->set('complement', 'Casa') ->set('district', 'S\u00e3o Vicente') ->set('city', 'S\u00e3o Paulo') ->set('state', 'S\u00e3o Paulo') ->set('zip_code', '13332251') ), [ Item::make()->set('item_id', 12)->set('description', 'Kit de Malas de Viagem')->set('quantity', 1)->set('price_cents', 25000), Item::make()->set('item_id', 12)->set('description', 'Protetor de Malas (100x100)')->set('quantity', 3)->set('price_cents', 3550), ] ); Casts Voc\u00ea pode usar casts dispon\u00edveis para transformar a resposta.","title":"Criando"},{"location":"recursos/boleto/criando/#criando","text":"","title":"Criando"},{"location":"recursos/boleto/criando/#sintaxe","text":"use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::billet()->create(/* ... */)","title":"Sintaxe"},{"location":"recursos/boleto/criando/#criando-boleto","text":"Para uma melhor organiza\u00e7\u00e3o, a forma de interagir com a cria\u00e7\u00e3o de boletos \u00e9 enviando para o m\u00e9todo create quatro (4) inst\u00e2ncias de classes de objeto: use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Billet\\Address; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Payer; // \ud83d\udc48 $billet = PagHiper::billet() ->create( Basic::make() // \ud83d\udc48 ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('days_due_date', 2), Payer::make() // \ud83d\udc48 ->set('name', 'Joao In\u00e1cio da Silva') ->set('email', 'joao.inacio@gmail.com') ->set('cpf_cnpj', '99279725041') ->set('phone', '11985850505') ->set( 'address', Address::make() // \ud83d\udc48 ->set('street', 'Rua Alameda Bar\u00e3o de Limeira') ->set('number', 102) ->set('complement', 'Casa') ->set('district', 'S\u00e3o Vicente') ->set('city', 'S\u00e3o Paulo') ->set('state', 'S\u00e3o Paulo') ->set('zip_code', '13332251') ), Item::make() // \ud83d\udc48 ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000));","title":"Criando Boleto"},{"location":"recursos/boleto/criando/#observacoes","text":"O m\u00e9todo set ir\u00e1 procurar pela propriedade e s\u00f3 definir\u00e1 o seu valor caso encontre a propriedade na classe que est\u00e1 sendo constru\u00edda pelo m\u00e9todo make . O nome das propriedades deve seguir exatamente a conven\u00e7\u00e3o de nome das propriedades de boleto banc\u00e1rio da PagHiper","title":"Observa\u00e7\u00f5es"},{"location":"recursos/boleto/criando/#usando-modelador-do-laravel","text":"Opcionalmente, voc\u00ea pode usar um modelador do Laravel como Payer do boleto: use App\\Models\\User; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::billet() ->create( Basic::make() ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('days_due_date', 2), User::first(), // \ud83d\udc48 Item::make() ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000)); Para utilizar a abordagem, acima seu modelador deve implementar a interface PagHiperModelAbstraction , a qual exigir\u00e1 que os seguintes m\u00e9todos sejam criados na classe do modelador: namespace App\\Models; use DevAjMeireles\\PagHiper\\Contracts\\PagHiperModelAbstraction; // \ud83d\udc48 use Illuminate\\Database\\Eloquent\\Model; class User extends Model implements PagHiperModelAbstraction // \ud83d\udc48 { // ... public function pagHiperName(): string { return 'Joao In\u00e1cio da Silva'; } public function pagHiperEmail(): string { return 'joao.inacio@gmail.com'; } public function pagHiperCpfCnpj(): string { return '99279725041'; } public function pagHiperPhone(): string { return '11985850505'; } public function pagHiperAddress(): array { return [ 'street' => 'Rua Alameda Bar\u00e3o de Limeira', 'number' => 102, 'complement' => 'Casa', 'district' => 'S\u00e3o Vicente', 'city' => 'S\u00e3o Paulo', 'zip_code' => '13332251', ]; } };","title":"Usando Modelador do Laravel"},{"location":"recursos/boleto/criando/#multiplos-itens","text":"Voc\u00ea tamb\u00e9m pode enviar um array de itens: use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Billet\\Address; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Payer; $billet = PagHiper::billet() ->create( Basic::make() ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('days_due_date', 2), Payer::make() ->set('name', 'Joao In\u00e1cio da Silva') ->set('email', 'joao.inacio@gmail.com') ->set('cpf_cnpj', '99279725041') ->set('phone', '11985850505') ->set( 'address', Address::make() ->set('street', 'Rua Alameda Bar\u00e3o de Limeira') ->set('number', 102) ->set('complement', 'Casa') ->set('district', 'S\u00e3o Vicente') ->set('city', 'S\u00e3o Paulo') ->set('state', 'S\u00e3o Paulo') ->set('zip_code', '13332251') ), [ Item::make()->set('item_id', 12)->set('description', 'Kit de Malas de Viagem')->set('quantity', 1)->set('price_cents', 25000), Item::make()->set('item_id', 12)->set('description', 'Protetor de Malas (100x100)')->set('quantity', 3)->set('price_cents', 3550), ] );","title":"Multiplos Itens"},{"location":"recursos/boleto/criando/#casts","text":"Voc\u00ea pode usar casts dispon\u00edveis para transformar a resposta.","title":"Casts"},{"location":"recursos/boleto/retorno/","text":"Retorno Autom\u00e1tico Paghiper for Laravel oferece uma forma f\u00e1cil de lidar com o retorno autom\u00e1tico. O retorno autom\u00e1tico da PagHiper ocorrer\u00e1 para a rota que voc\u00ea configurou no objeto Basic , no par\u00e2metro $notification_url na cria\u00e7\u00e3o do boleto banc\u00e1rio, ou para a rota definida via resolvedor . Essa rota deve ser uma rota p\u00fablica em sua aplica\u00e7\u00e3o, e de prefer\u00eancia que n\u00e3o receba nenhum tratamento especial, por exemplo: middlewares, autentica\u00e7\u00e3o, etc. Supondo que voc\u00ea possui uma rota nomeada como paghiper.notification que aceita requisi\u00e7\u00f5es POST , e que essa foi a rota utilizada, ent\u00e3o isso ser\u00e1 suficiente: use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; Route::post('/payment/notification', function (Request $request) { $notification = $request->input('notification_id'); // \ud83d\udc48 enviado pelo PagHiper $transaction = $request->input('transaction_id'); // \ud83d\udc48 enviado pelo PagHiper $notification = PagHiper::billet()->notification($notification, $transaction); })->name('paghiper.notification'); No exemplo acima, $notification ser\u00e1 um array com os dados da notifica\u00e7\u00e3o. Injetando o \\Illuminate\\Http\\Request De forma auxiliar, voc\u00ea pode injetar uma inst\u00e2ncia de \\Illuminate\\Http\\Request ao inv\u00e9s de ter que definir manualmente os par\u00e2metros para o m\u00e9todo notification : use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; Route::post('/payment/notification', function (Request $request) { $notification = PagHiper::billet()->notification($request); })->name('paghiper.notification'); PagHiper for Laravel ir\u00e1 buscar os par\u00e2metros necess\u00e1rios para a notifica\u00e7\u00e3o automaticamente. Cast Especial: BilletNotification De forma especial para o retorno autom\u00e1tico, Paghiper for Laravel oferece o cast BilletNotification , que quando utilizado ir\u00e1 mapear a resposta da PagHiper para uma classe de objeto contendo muitos m\u00e9todos \u00fateis: use Illuminate\\Http\\Request; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use Illuminate\\Support\\Facades\\Route; use DevAjMeireles\\PagHiper\\Enums\\Cast; // \ud83d\udc48 Route::post('/payment/notification', function (Request $request) { $notification = PagHiper::billet(Cast::BilletNotification) // \ud83d\udc48 ->notification($request); })->name('paghiper.notification'); M\u00e9todos Dispon\u00edveis: public function original(): Response \ud83d\udc46 resposta original, inst\u00e2ncia de \\Illuminate\\Http\\Client\\Response public function type(): string \ud83d\udc46 tipo da notifica\u00e7\u00e3o, pode ser billet ou pix public function transactionId(): string \ud83d\udc46 id da transa\u00e7\u00e3o public function orderId(): string \ud83d\udc46 $order_id da transa\u00e7\u00e3o public function createDate(): Carbon \ud83d\udc46 data de cria\u00e7\u00e3o do boleto como inst\u00e2ncia de \\Illuminate\\Support\\Carbon public function status(): string \ud83d\udc46 status da transa\u00e7\u00e3o como string public function pending(): bool public function reserved(): bool public function canceled(): bool public function completed(): bool public function paid(): bool public function processing(): bool public function refunded(): bool \ud83d\udc46 booleano para o status do boleto Os demais m\u00e9todos seguem a conven\u00e7\u00e3o de nomes da PagHiper : public function paidDate(): \\Illuminate\\Support\\Carbon public function valueCents(): int public function valueFeeCents(): int public function valueCentsPaid(): int public function latePaymentFine(): int public function perDayInterest(): bool public function earlyPaymentDiscountsDays(): int public function earlyPaymentDiscountsCents(): int public function openAfterDayDue(): int public function shippingPriceCents(): int public function discountCents(): int public function numCartItems(): int public function dueDate(): \\Illuminate\\Support\\Carbon public function bankSlip(): array public function items(): array|\\DevAjMeireles\\PagHiper\\DTO\\Objects\\Item public function payer(): \\DevAjMeireles\\PagHiper\\DTO\\Objects\\Payer M\u00e9todo Especial: modelable De forma estrat\u00e9gica, ao passar uma inst\u00e2ncia de um modelador do Laravel como Payer do boleto banc\u00e1rio, o order_id na PagHiper receber\u00e1 uma refer\u00eancia da classe e ID do modelador para que posteriormente no retorno autom\u00e1tico voc\u00ea possa utilizar o m\u00e9todo modelable para obter o modelador facilmente. Essa abordagem far\u00e1 com que o order_id do boleto banc\u00e1rio fique, por exemplo, da seguinte maneira na PagHiper: 11|App\\Model\\User:1 , onde 11 \u00e9 o n\u00famero do $order_id que voc\u00ea especificou na cria\u00e7\u00e3o da classe Basic . N\u00e3o h\u00e1 preocupa\u00e7\u00e3o enquanto a este formato, uma vez que o order_id do boleto banc\u00e1rio \u00e9 para uso interno, e n\u00e3o \u00e9 exibido ao cliente. Dessa forma voc\u00ea ent\u00e3o poder\u00e1 utilizar o m\u00e9todo modelable : use App\\Models\\User; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\Enums\\Cast; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; // criando o boleto para o modelador User:1 \ud83d\udc47 $billet = PagHiper::billet() ->create( Basic::make() ->set('order_id', 1433) ->set('days_due_date', 2) ->set('type_bank_slip', 'boletoA4') ->set('discount_cents', 0), User::find(1), // \ud83d\udc48 Item::make() ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000)); // retorno autom\u00e1tico \ud83d\udc47 Route::post('/payment/notification', function (Request $request) { $notification = PagHiper::billet(Cast::BilletNotification) // \ud83d\udc48 ->notification($request); })->name('paghiper.notification'); No exemplo acima, $notification ser\u00e1 uma inst\u00e2ncia da classe PagHiperBilletNotification contendo o m\u00e9todo modelable() . Ao utilizar o m\u00e9todo $notification->modelable() PagHiper for Laravel ir\u00e1 recuperar o usu\u00e1rio automaticamente: $user = $notification->modelable(); // \ud83d\udc48 No exemplo acima, $user ser\u00e1 uma inst\u00e2ncia de \\App\\Models\\User:1 . Tratamento de Excess\u00e3o Como \u00e9 de se esperar, caso haja algum erro na tentativa de capturar o modelador, uma excess\u00e3o do tipo NotificationModelNotFoundException ou ModelNotFoundException ser\u00e1 lan\u00e7ada. Para evitar esse comportamento voc\u00ea pode utilizar o m\u00e9todo modelable com o par\u00e2metro false : $user = $notification->modelable(false); // \ud83d\udc48 Dessa forma, se houver algum erro ou o modelador n\u00e3o for encontrado, o retorno ser\u00e1 null . Casts Voc\u00ea tamb\u00e9m pode usar os outros casts dispon\u00edveis para transformar a resposta.","title":"Retorno Autom\u00e1tico"},{"location":"recursos/boleto/retorno/#retorno-automatico","text":"Paghiper for Laravel oferece uma forma f\u00e1cil de lidar com o retorno autom\u00e1tico. O retorno autom\u00e1tico da PagHiper ocorrer\u00e1 para a rota que voc\u00ea configurou no objeto Basic , no par\u00e2metro $notification_url na cria\u00e7\u00e3o do boleto banc\u00e1rio, ou para a rota definida via resolvedor . Essa rota deve ser uma rota p\u00fablica em sua aplica\u00e7\u00e3o, e de prefer\u00eancia que n\u00e3o receba nenhum tratamento especial, por exemplo: middlewares, autentica\u00e7\u00e3o, etc. Supondo que voc\u00ea possui uma rota nomeada como paghiper.notification que aceita requisi\u00e7\u00f5es POST , e que essa foi a rota utilizada, ent\u00e3o isso ser\u00e1 suficiente: use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; Route::post('/payment/notification', function (Request $request) { $notification = $request->input('notification_id'); // \ud83d\udc48 enviado pelo PagHiper $transaction = $request->input('transaction_id'); // \ud83d\udc48 enviado pelo PagHiper $notification = PagHiper::billet()->notification($notification, $transaction); })->name('paghiper.notification'); No exemplo acima, $notification ser\u00e1 um array com os dados da notifica\u00e7\u00e3o.","title":"Retorno Autom\u00e1tico"},{"location":"recursos/boleto/retorno/#injetando-o-illuminatehttprequest","text":"De forma auxiliar, voc\u00ea pode injetar uma inst\u00e2ncia de \\Illuminate\\Http\\Request ao inv\u00e9s de ter que definir manualmente os par\u00e2metros para o m\u00e9todo notification : use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; Route::post('/payment/notification', function (Request $request) { $notification = PagHiper::billet()->notification($request); })->name('paghiper.notification'); PagHiper for Laravel ir\u00e1 buscar os par\u00e2metros necess\u00e1rios para a notifica\u00e7\u00e3o automaticamente.","title":"Injetando o \\Illuminate\\Http\\Request"},{"location":"recursos/boleto/retorno/#cast-especial-billetnotification","text":"De forma especial para o retorno autom\u00e1tico, Paghiper for Laravel oferece o cast BilletNotification , que quando utilizado ir\u00e1 mapear a resposta da PagHiper para uma classe de objeto contendo muitos m\u00e9todos \u00fateis: use Illuminate\\Http\\Request; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use Illuminate\\Support\\Facades\\Route; use DevAjMeireles\\PagHiper\\Enums\\Cast; // \ud83d\udc48 Route::post('/payment/notification', function (Request $request) { $notification = PagHiper::billet(Cast::BilletNotification) // \ud83d\udc48 ->notification($request); })->name('paghiper.notification');","title":"Cast Especial: BilletNotification"},{"location":"recursos/boleto/retorno/#metodos-disponiveis","text":"public function original(): Response \ud83d\udc46 resposta original, inst\u00e2ncia de \\Illuminate\\Http\\Client\\Response public function type(): string \ud83d\udc46 tipo da notifica\u00e7\u00e3o, pode ser billet ou pix public function transactionId(): string \ud83d\udc46 id da transa\u00e7\u00e3o public function orderId(): string \ud83d\udc46 $order_id da transa\u00e7\u00e3o public function createDate(): Carbon \ud83d\udc46 data de cria\u00e7\u00e3o do boleto como inst\u00e2ncia de \\Illuminate\\Support\\Carbon public function status(): string \ud83d\udc46 status da transa\u00e7\u00e3o como string public function pending(): bool public function reserved(): bool public function canceled(): bool public function completed(): bool public function paid(): bool public function processing(): bool public function refunded(): bool \ud83d\udc46 booleano para o status do boleto Os demais m\u00e9todos seguem a conven\u00e7\u00e3o de nomes da PagHiper : public function paidDate(): \\Illuminate\\Support\\Carbon public function valueCents(): int public function valueFeeCents(): int public function valueCentsPaid(): int public function latePaymentFine(): int public function perDayInterest(): bool public function earlyPaymentDiscountsDays(): int public function earlyPaymentDiscountsCents(): int public function openAfterDayDue(): int public function shippingPriceCents(): int public function discountCents(): int public function numCartItems(): int public function dueDate(): \\Illuminate\\Support\\Carbon public function bankSlip(): array public function items(): array|\\DevAjMeireles\\PagHiper\\DTO\\Objects\\Item public function payer(): \\DevAjMeireles\\PagHiper\\DTO\\Objects\\Payer","title":"M\u00e9todos Dispon\u00edveis:"},{"location":"recursos/boleto/retorno/#metodo-especial-modelable","text":"De forma estrat\u00e9gica, ao passar uma inst\u00e2ncia de um modelador do Laravel como Payer do boleto banc\u00e1rio, o order_id na PagHiper receber\u00e1 uma refer\u00eancia da classe e ID do modelador para que posteriormente no retorno autom\u00e1tico voc\u00ea possa utilizar o m\u00e9todo modelable para obter o modelador facilmente. Essa abordagem far\u00e1 com que o order_id do boleto banc\u00e1rio fique, por exemplo, da seguinte maneira na PagHiper: 11|App\\Model\\User:1 , onde 11 \u00e9 o n\u00famero do $order_id que voc\u00ea especificou na cria\u00e7\u00e3o da classe Basic . N\u00e3o h\u00e1 preocupa\u00e7\u00e3o enquanto a este formato, uma vez que o order_id do boleto banc\u00e1rio \u00e9 para uso interno, e n\u00e3o \u00e9 exibido ao cliente. Dessa forma voc\u00ea ent\u00e3o poder\u00e1 utilizar o m\u00e9todo modelable : use App\\Models\\User; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\Enums\\Cast; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; // criando o boleto para o modelador User:1 \ud83d\udc47 $billet = PagHiper::billet() ->create( Basic::make() ->set('order_id', 1433) ->set('days_due_date', 2) ->set('type_bank_slip', 'boletoA4') ->set('discount_cents', 0), User::find(1), // \ud83d\udc48 Item::make() ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000)); // retorno autom\u00e1tico \ud83d\udc47 Route::post('/payment/notification', function (Request $request) { $notification = PagHiper::billet(Cast::BilletNotification) // \ud83d\udc48 ->notification($request); })->name('paghiper.notification'); No exemplo acima, $notification ser\u00e1 uma inst\u00e2ncia da classe PagHiperBilletNotification contendo o m\u00e9todo modelable() . Ao utilizar o m\u00e9todo $notification->modelable() PagHiper for Laravel ir\u00e1 recuperar o usu\u00e1rio automaticamente: $user = $notification->modelable(); // \ud83d\udc48 No exemplo acima, $user ser\u00e1 uma inst\u00e2ncia de \\App\\Models\\User:1 .","title":"M\u00e9todo Especial: modelable"},{"location":"recursos/boleto/retorno/#tratamento-de-excessao","text":"Como \u00e9 de se esperar, caso haja algum erro na tentativa de capturar o modelador, uma excess\u00e3o do tipo NotificationModelNotFoundException ou ModelNotFoundException ser\u00e1 lan\u00e7ada. Para evitar esse comportamento voc\u00ea pode utilizar o m\u00e9todo modelable com o par\u00e2metro false : $user = $notification->modelable(false); // \ud83d\udc48 Dessa forma, se houver algum erro ou o modelador n\u00e3o for encontrado, o retorno ser\u00e1 null .","title":"Tratamento de Excess\u00e3o"},{"location":"recursos/boleto/retorno/#casts","text":"Voc\u00ea tamb\u00e9m pode usar os outros casts dispon\u00edveis para transformar a resposta.","title":"Casts"},{"location":"recursos/boleto/status/","text":"Status Para consultar o status de um Boleto Banc\u00e1rio utilize o m\u00e9todo status : use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::billet()->status('HF97T5SH2ZQNLF6Z'); Casts Voc\u00ea tamb\u00e9m pode usar os casts dispon\u00edveis para transformar a resposta.","title":"Status"},{"location":"recursos/boleto/status/#status","text":"Para consultar o status de um Boleto Banc\u00e1rio utilize o m\u00e9todo status : use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::billet()->status('HF97T5SH2ZQNLF6Z');","title":"Status"},{"location":"recursos/boleto/status/#casts","text":"Voc\u00ea tamb\u00e9m pode usar os casts dispon\u00edveis para transformar a resposta.","title":"Casts"},{"location":"recursos/pix/cancelando/","text":"Cancelando Para cancelar um PIX utilize o m\u00e9todo cancel : use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::pix()->cancel('HF97T5SH2ZQNLF6Z'); Casts Voc\u00ea tamb\u00e9m pode usar os casts dispon\u00edveis para transformar a resposta.","title":"Cancelando"},{"location":"recursos/pix/cancelando/#cancelando","text":"Para cancelar um PIX utilize o m\u00e9todo cancel : use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::pix()->cancel('HF97T5SH2ZQNLF6Z');","title":"Cancelando"},{"location":"recursos/pix/cancelando/#casts","text":"Voc\u00ea tamb\u00e9m pode usar os casts dispon\u00edveis para transformar a resposta.","title":"Casts"},{"location":"recursos/pix/criando/","text":"Criando Sintaxe use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $pix = PagHiper::pix()->create(/* ... */) Criando PIX Para uma melhor organiza\u00e7\u00e3o, a forma de interagir com a cria\u00e7\u00e3o de PIX \u00e9 enviando para o m\u00e9todo create quatro (4) inst\u00e2ncias de classes de objeto: use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Payer; // \ud83d\udc48 $pix = PagHiper::pix() ->create( Basic::make() // \ud83d\udc48 ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('discount_cents', 0), Payer::make() // \ud83d\udc48 ->set('name', 'Joao In\u00e1cio da Silva') ->set('email', 'joao.inacio@gmail.com') ->set('cpf_cnpj', '99279725041') ->set('phone', '11985850505'), Item::make() // \ud83d\udc48 ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000)); Observa\u00e7\u00f5es O m\u00e9todo set ir\u00e1 procurar pela propriedade e s\u00f3 definir\u00e1 o seu valor caso encontre a propriedade na classe que est\u00e1 sendo constru\u00edda pelo m\u00e9todo make . O nome das propriedades deve seguir exatamente a conven\u00e7\u00e3o de nome das propriedades de boleto banc\u00e1rio da PagHiper Usando Modelador do Laravel Opcionalmente, voc\u00ea pode usar um modelador do Laravel como Payer do boleto: use App\\Models\\User; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $pix = PagHiper::pix() ->create( Basic::make() ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('discount_cents', 0), User::first(), // \ud83d\udc48 Item::make() ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000)); Para utilizar a abordagem, acima seu modelador deve implementar a interface PagHiperModelAbstraction , a qual exigir\u00e1 que os seguintes m\u00e9todos sejam criados na classe do modelador: namespace App\\Models; use DevAjMeireles\\PagHiper\\Contracts\\PagHiperModelAbstraction; // \ud83d\udc48 use Illuminate\\Database\\Eloquent\\Model; class User extends Model implements PagHiperModelAbstraction // \ud83d\udc48 { // ... public function pagHiperName(): string { return 'Joao In\u00e1cio da Silva'; } public function pagHiperEmail(): string { return 'joao.inacio@gmail.com'; } public function pagHiperCpfCnpj(): string { return '99279725041'; } public function pagHiperPhone(): string { return '11985850505'; } public function pagHiperAddress(): array { // pix n\u00e3o utiliza endere\u00e7o, retorne um array vazio return []; } }; Multiplos Itens Voc\u00ea tamb\u00e9m pode enviar um array de itens: use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Payer; $pix = PagHiper::pix() ->create( Basic::make() ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('discount_cents', 0), Payer::make() ->set('name', 'Joao In\u00e1cio da Silva') ->set('email', 'joao.inacio@gmail.com') ->set('cpf_cnpj', '99279725041') ->set('phone', '11985850505'), [ Item::make()->set('item_id', 12)->set('description', 'Kit de Malas de Viagem')->set('quantity', 1)->set('price_cents', 25000), Item::make()->set('item_id', 12)->set('description', 'Protetor de Malas (100x100)')->set('quantity', 3)->set('price_cents', 3550), ] ); Casts Voc\u00ea pode usar casts dispon\u00edveis para transformar a resposta.","title":"Criando"},{"location":"recursos/pix/criando/#criando","text":"","title":"Criando"},{"location":"recursos/pix/criando/#sintaxe","text":"use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $pix = PagHiper::pix()->create(/* ... */)","title":"Sintaxe"},{"location":"recursos/pix/criando/#criando-pix","text":"Para uma melhor organiza\u00e7\u00e3o, a forma de interagir com a cria\u00e7\u00e3o de PIX \u00e9 enviando para o m\u00e9todo create quatro (4) inst\u00e2ncias de classes de objeto: use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Payer; // \ud83d\udc48 $pix = PagHiper::pix() ->create( Basic::make() // \ud83d\udc48 ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('discount_cents', 0), Payer::make() // \ud83d\udc48 ->set('name', 'Joao In\u00e1cio da Silva') ->set('email', 'joao.inacio@gmail.com') ->set('cpf_cnpj', '99279725041') ->set('phone', '11985850505'), Item::make() // \ud83d\udc48 ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000));","title":"Criando PIX"},{"location":"recursos/pix/criando/#observacoes","text":"O m\u00e9todo set ir\u00e1 procurar pela propriedade e s\u00f3 definir\u00e1 o seu valor caso encontre a propriedade na classe que est\u00e1 sendo constru\u00edda pelo m\u00e9todo make . O nome das propriedades deve seguir exatamente a conven\u00e7\u00e3o de nome das propriedades de boleto banc\u00e1rio da PagHiper","title":"Observa\u00e7\u00f5es"},{"location":"recursos/pix/criando/#usando-modelador-do-laravel","text":"Opcionalmente, voc\u00ea pode usar um modelador do Laravel como Payer do boleto: use App\\Models\\User; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $pix = PagHiper::pix() ->create( Basic::make() ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('discount_cents', 0), User::first(), // \ud83d\udc48 Item::make() ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000)); Para utilizar a abordagem, acima seu modelador deve implementar a interface PagHiperModelAbstraction , a qual exigir\u00e1 que os seguintes m\u00e9todos sejam criados na classe do modelador: namespace App\\Models; use DevAjMeireles\\PagHiper\\Contracts\\PagHiperModelAbstraction; // \ud83d\udc48 use Illuminate\\Database\\Eloquent\\Model; class User extends Model implements PagHiperModelAbstraction // \ud83d\udc48 { // ... public function pagHiperName(): string { return 'Joao In\u00e1cio da Silva'; } public function pagHiperEmail(): string { return 'joao.inacio@gmail.com'; } public function pagHiperCpfCnpj(): string { return '99279725041'; } public function pagHiperPhone(): string { return '11985850505'; } public function pagHiperAddress(): array { // pix n\u00e3o utiliza endere\u00e7o, retorne um array vazio return []; } };","title":"Usando Modelador do Laravel"},{"location":"recursos/pix/criando/#multiplos-itens","text":"Voc\u00ea tamb\u00e9m pode enviar um array de itens: use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Payer; $pix = PagHiper::pix() ->create( Basic::make() ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('discount_cents', 0), Payer::make() ->set('name', 'Joao In\u00e1cio da Silva') ->set('email', 'joao.inacio@gmail.com') ->set('cpf_cnpj', '99279725041') ->set('phone', '11985850505'), [ Item::make()->set('item_id', 12)->set('description', 'Kit de Malas de Viagem')->set('quantity', 1)->set('price_cents', 25000), Item::make()->set('item_id', 12)->set('description', 'Protetor de Malas (100x100)')->set('quantity', 3)->set('price_cents', 3550), ] );","title":"Multiplos Itens"},{"location":"recursos/pix/criando/#casts","text":"Voc\u00ea pode usar casts dispon\u00edveis para transformar a resposta.","title":"Casts"},{"location":"recursos/pix/retorno/","text":"Retorno Autom\u00e1tico Paghiper for Laravel oferece uma forma f\u00e1cil de lidar com o retorno autom\u00e1tico. O retorno autom\u00e1tico da PagHiper ocorrer\u00e1 para a rota que voc\u00ea configurou no objeto Basic , no par\u00e2metro $notification_url na cria\u00e7\u00e3o do PIX, ou para a rota definida via resolvedor . Essa rota deve ser uma rota p\u00fablica em sua aplica\u00e7\u00e3o, e de prefer\u00eancia que n\u00e3o receba nenhum tratamento especial, por exemplo: middlewares, autentica\u00e7\u00e3o, etc. Supondo que voc\u00ea possui uma rota nomeada como paghiper.notification que aceita requisi\u00e7\u00f5es POST , e que essa foi a rota utilizada, ent\u00e3o isso ser\u00e1 suficiente: use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; Route::post('/payment/notification', function (Request $request) { $notification = $request->input('notification_id'); // \ud83d\udc48 enviado pelo PagHiper $transaction = $request->input('transaction_id'); // \ud83d\udc48 enviado pelo PagHiper $notification = PagHiper::pix()->notification($notification, $transaction); })->name('paghiper.notification'); No exemplo acima, $notification ser\u00e1 um array com os dados da notifica\u00e7\u00e3o. Injetando o \\Illuminate\\Http\\Request De forma auxiliar, voc\u00ea pode injetar uma inst\u00e2ncia de \\Illuminate\\Http\\Request ao inv\u00e9s de ter que definir manualmente os par\u00e2metros para o m\u00e9todo notification : use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; Route::post('/payment/notification', function (Request $request) { $notification = PagHiper::pix()->notification($request); })->name('paghiper.notification'); PagHiper for Laravel ir\u00e1 buscar os par\u00e2metros necess\u00e1rios para a notifica\u00e7\u00e3o automaticamente. Cast Especial: PixNotification De forma especial para o retorno autom\u00e1tico, Paghiper for Laravel oferece o cast PixNotification , que quando utilizado ir\u00e1 mapear a resposta da PagHiper para uma classe de objeto contendo muitos m\u00e9todos \u00fateis: use Illuminate\\Http\\Request; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use Illuminate\\Support\\Facades\\Route; use DevAjMeireles\\PagHiper\\Enums\\Cast; // \ud83d\udc48 Route::post('/payment/notification', function (Request $request) { $notification = PagHiper::pix(Cast::PixNotification) // \ud83d\udc48 ->notification($request); })->name('paghiper.notification'); M\u00e9todos Dispon\u00edveis: public function original(): Response \ud83d\udc46 resposta original, inst\u00e2ncia de \\Illuminate\\Http\\Client\\Response public function type(): string \ud83d\udc46 tipo da notifica\u00e7\u00e3o, pode ser billet ou pix public function transactionId(): string \ud83d\udc46 id da transa\u00e7\u00e3o public function orderId(): string \ud83d\udc46 $order_id da transa\u00e7\u00e3o public function createDate(): Carbon \ud83d\udc46 data de cria\u00e7\u00e3o do pix como inst\u00e2ncia de \\Illuminate\\Support\\Carbon public function status(): string \ud83d\udc46 status da transa\u00e7\u00e3o como string public function pending(): bool public function canceled(): bool public function completed(): bool public function paid(): bool public function processing(): bool public function refunded(): bool \ud83d\udc46 booleano para o status do pix Os demais m\u00e9todos seguem a conven\u00e7\u00e3o de nomes da PagHiper : public function dueDateTime(): \\Illuminate\\Support\\Carbon public function paidDate(): \\Illuminate\\Support\\Carbon public function valueCents(): int public function valueFeeCents(): int public function valueCentsPaid(): int public function shippingPriceCents(): int public function discountCents(): int public function numCartItems(): int public function dueDate(): \\Illuminate\\Support\\Carbon public function pixCode(): array public function items(): array|\\DevAjMeireles\\PagHiper\\DTO\\Objects\\Item public function payer(): \\DevAjMeireles\\PagHiper\\DTO\\Objects\\Payer M\u00e9todo Especial: modelable De forma estrat\u00e9gica, ao passar uma inst\u00e2ncia de um modelador do Laravel como Payer do PIX, o order_id na PagHiper receber\u00e1 uma refer\u00eancia da classe e ID do modelador para que posteriormente no retorno autom\u00e1tico voc\u00ea possa utilizar o m\u00e9todo modelable para obter o modelador facilmente. Essa abordagem far\u00e1 com que o order_id PIX fique, por exemplo, da seguinte maneira na PagHiper: 11|App\\Model\\User:1 , onde 11 \u00e9 o n\u00famero do $order_id que voc\u00ea especificou na cria\u00e7\u00e3o da classe Basic . N\u00e3o h\u00e1 preocupa\u00e7\u00e3o enquanto a este formato, uma vez que o order_id do PIX \u00e9 para uso interno, e n\u00e3o \u00e9 exibido ao cliente. Dessa forma voc\u00ea ent\u00e3o poder\u00e1 utilizar o m\u00e9todo modelable : use App\\Models\\User; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\Enums\\Cast; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; // criando o boleto para o modelador User:1 \ud83d\udc47 $pix = PagHiper::pix() ->create( Basic::make() ->set('order_id', 1433) ->set('days_due_date', 2) ->set('discount_cents', 0), User::find(1), // \ud83d\udc48 Item::make() ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000)); // retorno autom\u00e1tico \ud83d\udc47 Route::post('/payment/notification', function (Request $request) { $notification = PagHiper::pix(Cast::PixNotification) // \ud83d\udc48 ->notification($request); })->name('paghiper.notification'); No exemplo acima, $notification ser\u00e1 uma inst\u00e2ncia da classe PagHiperPixNotification contendo o m\u00e9todo modelable() . Ao utilizar o m\u00e9todo $notification->modelable() PagHiper for Laravel ir\u00e1 recuperar o usu\u00e1rio automaticamente: $user = $notification->modelable(); // \ud83d\udc48 No exemplo acima, $user ser\u00e1 uma inst\u00e2ncia de \\App\\Models\\User:1 . Tratamento de Excess\u00e3o Como \u00e9 de se esperar, caso haja algum erro na tentativa de capturar o modelador, uma excess\u00e3o do tipo NotificationModelNotFoundException ou ModelNotFoundException ser\u00e1 lan\u00e7ada. Para evitar esse comportamento voc\u00ea pode utilizar o m\u00e9todo modelable com o par\u00e2metro false : $user = $notification->modelable(false); // \ud83d\udc48 Dessa forma, se houver algum erro ou o modelador n\u00e3o for encontrado, o retorno ser\u00e1 null . Casts Voc\u00ea tamb\u00e9m pode usar os outros casts dispon\u00edveis para transformar a resposta.","title":"Retorno Autom\u00e1tico"},{"location":"recursos/pix/retorno/#retorno-automatico","text":"Paghiper for Laravel oferece uma forma f\u00e1cil de lidar com o retorno autom\u00e1tico. O retorno autom\u00e1tico da PagHiper ocorrer\u00e1 para a rota que voc\u00ea configurou no objeto Basic , no par\u00e2metro $notification_url na cria\u00e7\u00e3o do PIX, ou para a rota definida via resolvedor . Essa rota deve ser uma rota p\u00fablica em sua aplica\u00e7\u00e3o, e de prefer\u00eancia que n\u00e3o receba nenhum tratamento especial, por exemplo: middlewares, autentica\u00e7\u00e3o, etc. Supondo que voc\u00ea possui uma rota nomeada como paghiper.notification que aceita requisi\u00e7\u00f5es POST , e que essa foi a rota utilizada, ent\u00e3o isso ser\u00e1 suficiente: use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; Route::post('/payment/notification', function (Request $request) { $notification = $request->input('notification_id'); // \ud83d\udc48 enviado pelo PagHiper $transaction = $request->input('transaction_id'); // \ud83d\udc48 enviado pelo PagHiper $notification = PagHiper::pix()->notification($notification, $transaction); })->name('paghiper.notification'); No exemplo acima, $notification ser\u00e1 um array com os dados da notifica\u00e7\u00e3o.","title":"Retorno Autom\u00e1tico"},{"location":"recursos/pix/retorno/#injetando-o-illuminatehttprequest","text":"De forma auxiliar, voc\u00ea pode injetar uma inst\u00e2ncia de \\Illuminate\\Http\\Request ao inv\u00e9s de ter que definir manualmente os par\u00e2metros para o m\u00e9todo notification : use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; Route::post('/payment/notification', function (Request $request) { $notification = PagHiper::pix()->notification($request); })->name('paghiper.notification'); PagHiper for Laravel ir\u00e1 buscar os par\u00e2metros necess\u00e1rios para a notifica\u00e7\u00e3o automaticamente.","title":"Injetando o \\Illuminate\\Http\\Request"},{"location":"recursos/pix/retorno/#cast-especial-pixnotification","text":"De forma especial para o retorno autom\u00e1tico, Paghiper for Laravel oferece o cast PixNotification , que quando utilizado ir\u00e1 mapear a resposta da PagHiper para uma classe de objeto contendo muitos m\u00e9todos \u00fateis: use Illuminate\\Http\\Request; use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use Illuminate\\Support\\Facades\\Route; use DevAjMeireles\\PagHiper\\Enums\\Cast; // \ud83d\udc48 Route::post('/payment/notification', function (Request $request) { $notification = PagHiper::pix(Cast::PixNotification) // \ud83d\udc48 ->notification($request); })->name('paghiper.notification');","title":"Cast Especial: PixNotification"},{"location":"recursos/pix/retorno/#metodos-disponiveis","text":"public function original(): Response \ud83d\udc46 resposta original, inst\u00e2ncia de \\Illuminate\\Http\\Client\\Response public function type(): string \ud83d\udc46 tipo da notifica\u00e7\u00e3o, pode ser billet ou pix public function transactionId(): string \ud83d\udc46 id da transa\u00e7\u00e3o public function orderId(): string \ud83d\udc46 $order_id da transa\u00e7\u00e3o public function createDate(): Carbon \ud83d\udc46 data de cria\u00e7\u00e3o do pix como inst\u00e2ncia de \\Illuminate\\Support\\Carbon public function status(): string \ud83d\udc46 status da transa\u00e7\u00e3o como string public function pending(): bool public function canceled(): bool public function completed(): bool public function paid(): bool public function processing(): bool public function refunded(): bool \ud83d\udc46 booleano para o status do pix Os demais m\u00e9todos seguem a conven\u00e7\u00e3o de nomes da PagHiper : public function dueDateTime(): \\Illuminate\\Support\\Carbon public function paidDate(): \\Illuminate\\Support\\Carbon public function valueCents(): int public function valueFeeCents(): int public function valueCentsPaid(): int public function shippingPriceCents(): int public function discountCents(): int public function numCartItems(): int public function dueDate(): \\Illuminate\\Support\\Carbon public function pixCode(): array public function items(): array|\\DevAjMeireles\\PagHiper\\DTO\\Objects\\Item public function payer(): \\DevAjMeireles\\PagHiper\\DTO\\Objects\\Payer","title":"M\u00e9todos Dispon\u00edveis:"},{"location":"recursos/pix/retorno/#metodo-especial-modelable","text":"De forma estrat\u00e9gica, ao passar uma inst\u00e2ncia de um modelador do Laravel como Payer do PIX, o order_id na PagHiper receber\u00e1 uma refer\u00eancia da classe e ID do modelador para que posteriormente no retorno autom\u00e1tico voc\u00ea possa utilizar o m\u00e9todo modelable para obter o modelador facilmente. Essa abordagem far\u00e1 com que o order_id PIX fique, por exemplo, da seguinte maneira na PagHiper: 11|App\\Model\\User:1 , onde 11 \u00e9 o n\u00famero do $order_id que voc\u00ea especificou na cria\u00e7\u00e3o da classe Basic . N\u00e3o h\u00e1 preocupa\u00e7\u00e3o enquanto a este formato, uma vez que o order_id do PIX \u00e9 para uso interno, e n\u00e3o \u00e9 exibido ao cliente. Dessa forma voc\u00ea ent\u00e3o poder\u00e1 utilizar o m\u00e9todo modelable : use App\\Models\\User; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\Enums\\Cast; // \ud83d\udc48 use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; // criando o boleto para o modelador User:1 \ud83d\udc47 $pix = PagHiper::pix() ->create( Basic::make() ->set('order_id', 1433) ->set('days_due_date', 2) ->set('discount_cents', 0), User::find(1), // \ud83d\udc48 Item::make() ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000)); // retorno autom\u00e1tico \ud83d\udc47 Route::post('/payment/notification', function (Request $request) { $notification = PagHiper::pix(Cast::PixNotification) // \ud83d\udc48 ->notification($request); })->name('paghiper.notification'); No exemplo acima, $notification ser\u00e1 uma inst\u00e2ncia da classe PagHiperPixNotification contendo o m\u00e9todo modelable() . Ao utilizar o m\u00e9todo $notification->modelable() PagHiper for Laravel ir\u00e1 recuperar o usu\u00e1rio automaticamente: $user = $notification->modelable(); // \ud83d\udc48 No exemplo acima, $user ser\u00e1 uma inst\u00e2ncia de \\App\\Models\\User:1 .","title":"M\u00e9todo Especial: modelable"},{"location":"recursos/pix/retorno/#tratamento-de-excessao","text":"Como \u00e9 de se esperar, caso haja algum erro na tentativa de capturar o modelador, uma excess\u00e3o do tipo NotificationModelNotFoundException ou ModelNotFoundException ser\u00e1 lan\u00e7ada. Para evitar esse comportamento voc\u00ea pode utilizar o m\u00e9todo modelable com o par\u00e2metro false : $user = $notification->modelable(false); // \ud83d\udc48 Dessa forma, se houver algum erro ou o modelador n\u00e3o for encontrado, o retorno ser\u00e1 null .","title":"Tratamento de Excess\u00e3o"},{"location":"recursos/pix/retorno/#casts","text":"Voc\u00ea tamb\u00e9m pode usar os outros casts dispon\u00edveis para transformar a resposta.","title":"Casts"},{"location":"recursos/pix/status/","text":"Status Para consultar o status de um Boleto Banc\u00e1rio utilize o m\u00e9todo status : use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::pix()->status('HF97T5SH2ZQNLF6Z'); Casts Voc\u00ea tamb\u00e9m pode usar os casts dispon\u00edveis para transformar a resposta.","title":"Status"},{"location":"recursos/pix/status/#status","text":"Para consultar o status de um Boleto Banc\u00e1rio utilize o m\u00e9todo status : use DevAjMeireles\\PagHiper\\Facades\\PagHiper; $billet = PagHiper::pix()->status('HF97T5SH2ZQNLF6Z');","title":"Status"},{"location":"recursos/pix/status/#casts","text":"Voc\u00ea tamb\u00e9m pode usar os casts dispon\u00edveis para transformar a resposta.","title":"Casts"},{"location":"recursos/utilidades/casts/","text":"Cast das Respostas Para facilitar a sua intera\u00e7\u00e3o com as respostas dadas pela PagHiper, o Paghiper for Laravel oferece diversos casts diferentes que visam interceptar a resposta e transforma-l\u00e1 em algo, sendo eles: Array : resposta convertida para array Json : resposta convertida para json Collect ou Collection : resposta convertida para Illuminate\\Support\\Collection Response : objeto original da resposta, Illuminate\\Http\\Client\\Response Os casts est\u00e3o dispon\u00edveis tanto para intera\u00e7\u00e3o com Boleto Banc\u00e1rio como PIX. use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Billet\\Address; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\Enums\\Cast; // \ud83d\udc48 $billet = PagHiper::billet(Cast::Collection) // \ud83d\udc48 ->create( Basic::make() ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('days_due_date', 2) ->set('type_bank_slip', 'boletoA4') ->set('discount_cents', 0), Payer::make() ->set('name', 'Joao In\u00e1cio da Silva') ->set('email', 'joao.inacio@gmail.com') ->set('cpf_cnpj', '123.456.789-00') ->set('phone', '11985850505') ->set( 'address', Address::make() ->set('street', 'Rua Alameda Bar\u00e3o de Limeira') ->set('number', 102) ->set('complement', 'Casa') ->set('district', 'S\u00e3o Vicente') ->set('city', 'S\u00e3o Paulo') ->set('state', 'S\u00e3o Paulo') ->set('zip_code', '13332251') ), Item::make() ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000)); No exemplo acima, $billet passa a ser uma inst\u00e2ncia de Illuminate\\Support\\Collection . Se n\u00e3o definido, todas as respostas receber\u00e3o o cast Array .","title":"Casts"},{"location":"recursos/utilidades/casts/#cast-das-respostas","text":"Para facilitar a sua intera\u00e7\u00e3o com as respostas dadas pela PagHiper, o Paghiper for Laravel oferece diversos casts diferentes que visam interceptar a resposta e transforma-l\u00e1 em algo, sendo eles: Array : resposta convertida para array Json : resposta convertida para json Collect ou Collection : resposta convertida para Illuminate\\Support\\Collection Response : objeto original da resposta, Illuminate\\Http\\Client\\Response Os casts est\u00e3o dispon\u00edveis tanto para intera\u00e7\u00e3o com Boleto Banc\u00e1rio como PIX. use DevAjMeireles\\PagHiper\\Facades\\PagHiper; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Basic; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Billet\\Address; use DevAjMeireles\\PagHiper\\DTO\\Objects\\Item; use DevAjMeireles\\PagHiper\\Enums\\Cast; // \ud83d\udc48 $billet = PagHiper::billet(Cast::Collection) // \ud83d\udc48 ->create( Basic::make() ->set('order_id', 1433) ->set('notification_url', route('paghiper.notification')) ->set('days_due_date', 2) ->set('type_bank_slip', 'boletoA4') ->set('discount_cents', 0), Payer::make() ->set('name', 'Joao In\u00e1cio da Silva') ->set('email', 'joao.inacio@gmail.com') ->set('cpf_cnpj', '123.456.789-00') ->set('phone', '11985850505') ->set( 'address', Address::make() ->set('street', 'Rua Alameda Bar\u00e3o de Limeira') ->set('number', 102) ->set('complement', 'Casa') ->set('district', 'S\u00e3o Vicente') ->set('city', 'S\u00e3o Paulo') ->set('state', 'S\u00e3o Paulo') ->set('zip_code', '13332251') ), Item::make() ->set('item_id', 12) ->set('description', 'Kit de Malas de Viagem') ->set('quantity', 1) ->set('price_cents', 25000)); No exemplo acima, $billet passa a ser uma inst\u00e2ncia de Illuminate\\Support\\Collection . Se n\u00e3o definido, todas as respostas receber\u00e3o o cast Array .","title":"Cast das Respostas"},{"location":"repositorio/contribuicao/","text":"Contribui\u00e7\u00e3o Sinta-se a vontade para contribuir com um PR que resolva algum problema ou introduza melhorias. Ser\u00e1 muito \u00fatil se o seu PR seguir os seguintes padr\u00f5es: O c\u00f3digo do PR ser escrito em ingl\u00eas, seguindo a PSR12 O c\u00f3digo do PR ser formatado usando PestPHP O c\u00f3digo do PR ser analisando usando PhpStan O c\u00f3digo do PR ser testado usando PestPHP , inclusive adi\u00e7\u00f5es ou modifica\u00e7\u00f5es Sinta-se \u00e0 vontade para enviar o seu PR mesmo que ele n\u00e3o atenda as exig\u00eancias acima. \ud83d\ude09 Ambiente de Desenvolvimento Crie um fork do reposit\u00f3rio Clone o reposit\u00f3rio a partir do seu fork: git clone <url_do_reposit\u00f3rio> Instale as depend\u00eancias: cd <pasta> && composer install Execute testes: composer test Analise a integridade do c\u00f3digo: composer analyse Analise a integridade de tipagem do c\u00f3digo: composer type:coverage","title":"Contribui\u00e7\u00e3o"},{"location":"repositorio/contribuicao/#contribuicao","text":"Sinta-se a vontade para contribuir com um PR que resolva algum problema ou introduza melhorias. Ser\u00e1 muito \u00fatil se o seu PR seguir os seguintes padr\u00f5es: O c\u00f3digo do PR ser escrito em ingl\u00eas, seguindo a PSR12 O c\u00f3digo do PR ser formatado usando PestPHP O c\u00f3digo do PR ser analisando usando PhpStan O c\u00f3digo do PR ser testado usando PestPHP , inclusive adi\u00e7\u00f5es ou modifica\u00e7\u00f5es Sinta-se \u00e0 vontade para enviar o seu PR mesmo que ele n\u00e3o atenda as exig\u00eancias acima. \ud83d\ude09","title":"Contribui\u00e7\u00e3o"},{"location":"repositorio/contribuicao/#ambiente-de-desenvolvimento","text":"Crie um fork do reposit\u00f3rio Clone o reposit\u00f3rio a partir do seu fork: git clone <url_do_reposit\u00f3rio> Instale as depend\u00eancias: cd <pasta> && composer install Execute testes: composer test Analise a integridade do c\u00f3digo: composer analyse Analise a integridade de tipagem do c\u00f3digo: composer type:coverage","title":"Ambiente de Desenvolvimento"}]}